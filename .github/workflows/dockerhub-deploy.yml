name: Build and Deploy Docker Image

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  IMAGE_NAME: curiocloud-backend

jobs:
  build-and-push:
    name: Build and Push Image
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.determine-tag.outputs.image_tag }}
      image_repo: ${{ steps.image.outputs.repository }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Resolve image repository
        id: image
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        run: |
          echo "repository=${DOCKERHUB_USERNAME}/${IMAGE_NAME}" >> "$GITHUB_OUTPUT"

      - name: Log in to DockerHub
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          echo "${DOCKERHUB_TOKEN}" | docker login --username "${DOCKERHUB_USERNAME}" --password-stdin

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.image.outputs.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.source=${{ github.repository }}

      - name: Determine deploy tag
        id: determine-tag
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "image_tag=latest" >> "$GITHUB_OUTPUT"
          else
            echo "image_tag=${{ github.ref_name }}" >> "$GITHUB_OUTPUT"
          fi

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          push: true
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # deploy:
  #   name: Update remote Docker host
  #   needs: build-and-push
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main'
  #   env:
  #     IMAGE_TAG: ${{ needs.build-and-push.outputs.image_tag }}
  #     IMAGE_REPO: ${{ needs.build-and-push.outputs.image_repo }}
  #   steps:
  #     - name: Deploy via SSH
  #       uses: appleboy/ssh-action@v1.0.3
  #       with:
  #         host: ${{ secrets.REMOTE_HOST }}
  #         username: ${{ secrets.REMOTE_USER }}
  #         key: ${{ secrets.REMOTE_SSH_KEY }}
  #         port: ${{ secrets.REMOTE_PORT }}
  #         script: |
  #           docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
  #           docker pull ${IMAGE_REPO}:${IMAGE_TAG}
  #           docker ps -q --filter "name=${{ secrets.DOCKER_CONTAINER_NAME }}" | grep -q "." && docker stop ${{ secrets.DOCKER_CONTAINER_NAME }} || true
  #           docker rm ${{ secrets.DOCKER_CONTAINER_NAME }} 2>/dev/null || true
  #           docker run -d --name ${{ secrets.DOCKER_CONTAINER_NAME }} --restart always -p 8000:8000 ${IMAGE_REPO}:${IMAGE_TAG}
